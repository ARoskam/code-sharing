---
# This playbook is used to perform post-installation tasks on a Windows 11 VM via WinRM.
- name: OS Configuration and Updates
  hosts: win_vms
  gather_facts: no
  vars_files:
    - ../build/vars/P1-OSconfig-Updates-vars.yml
  vars:
    ansible_connection: winrm
    ansible_winrm_server_cert_validation: ignore
    ansible_port: 5985
  tasks:
    # Install required software and perform base configuration
    - name: Install XenTools
      ansible.windows.win_package:
        path: "{{ xentools_install_path }}"
        arguments: "{{ xentools_install_args }}"
        state: present
    
    - name: Install Visual C++ Runtimes (All-in-One)
      ansible.windows.win_package:
        path: "{{ visual_c_runtimes_install_path }}"
        arguments: "{{ visual_c_runtimes_install_args }}"
        state: present
    
    - name: Install .NET 8 Runtime
      ansible.windows.win_shell: winget install --id {{ dotnet8_winget_id }} {{ dotnet8_winget_args }}
      register: dotnet8_result
      ignore_errors: yes
    
    # Install Windows Updates
    - name: Install all available Windows Updates
      ansible.windows.win_updates:
        category_names:
          - CriticalUpdates
          - SecurityUpdates
          - UpdateRollups
          - Updates
        reject_list:
          - 'Preview'
        reboot: yes
        reboot_timeout: 3600
      register: update_result

    - name: Show Windows Update results
      ansible.builtin.debug:
        var: update_result

    # Reboot action after updates
    - name: Reboot the computer after base configuration
      ansible.windows.win_reboot:
        reboot_timeout: 1800